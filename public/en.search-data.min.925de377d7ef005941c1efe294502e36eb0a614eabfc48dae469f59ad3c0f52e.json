[{"id":0,"href":"/docs/Light-Weight-Neural-Networks/CNN-Series/","title":"CNN Series","section":"Light Weight Neural Networks","content":"jsdaskjdlaskdjlska\nzahsdkjashkdaskd\n"},{"id":1,"href":"/docs/Light-Weight-Neural-Networks/CNN-Series/MobileNet-v1/","title":"MobileNet v1","section":"CNN Series","content":"Reference: MobileNets: Efficient Convolutional Neural Networks for Mobile Vision Applications\nOfficial Code: Tensorflow\nIntro\r#\rMobileNet is a type of convolutional neural network designed for mobile and embedded vision applications. It is based on a streamlined architeture which uses depthwise seperable convolutions to build light weight deep neural networks with efficient trade-off between latency and accuracy.\nDepthwise Seperable Convolution\r#\rDepthwise seperable convolution is the basic component of MobileNets architecture. It is a form of factorized convolutions which factorize a standard convolution into a depthwise convolution and a $1 \\times 1$ convolution called pointwise convolution.\nDepthwise convolution apply a single filter on each input channel. Pointwise convolution integarates the information flowing through different channels, using $1 \\times 1$ convolution.\nFor the purpose of designing a kind of light weight deep neural networks, taking Depthwise Seperable convolution instead of standard convolutions into the architeture is a good choice because it brings huge amounts of parameter cutting. The fowllowing part will calculate the parameter numbers of Depthwise Seperable Convolution compared with standard convolution.\nAssuming that the dimension of input feature map is $D_f \\times D_f \\times M$ and the dimension of output feature map is $D_f \\times D_f \\times N$ where $M$ and $N$ is the number of input and output channels respectively, the convolution kernel size is $D_k \\times D_k$.\nStandard convolution has the parameter number of: \\[\r$D_k \\times D_k \\times M \\times N$\r\\]\rDepthwise seperable convolution has the parameter number of: \\[\r$D_k \\times D_k \\times M \u0026#43; 1 \\times 1 \\times M \\times N$\r\\]\rAs expressed above, we can get a reduction in parameter numbers of: \\[\r$\\frac{D_k \\cdot D_k \\cdot M \u0026#43; 1 \\cdot 1 \\cdot M \\cdot N}{D_k \\cdot D_k \\cdot M \\cdot N} = \\frac{1}{N} \u0026#43; \\frac{1}{D_k^2}$\r\\]\rComputational cost holds the same reduction: \\[\r$\\frac{D_k \\cdot D_k \\cdot M \\cdot D_f \\cdot D_f \u0026#43; 1 \\cdot 1 \\cdot M \\cdot N \\cdot D_f \\cdot D_f}{D_k \\cdot D_k \\cdot M \\cdot N \\cdot D_f \\cdot D_f} = \\frac{1}{N} \u0026#43; \\frac{1}{D_k^2}$\r\\]\r![](./figures/MobileNet v1/1.png)\n"},{"id":2,"href":"/posts/Hugo-notes/","title":"Hugo notes","section":"Blog","content":"\rHugo official website\nHugo, written in Go, is a kind of static site generator which is fast and user-friendly. Websites built with Hugo are extremely fast and secure.\nBefore Hugo\r#\rCreate a new repository in your github.\nRepository name mast be the [username].github.io\rConfig your github pages.\nHugo directory structrue\r#\r--\u0026gt;yourBlogRoot/ (Blog Root) --\u0026gt;archetypes/ --\u0026gt;assets/ --\u0026gt;content/\t# markdown files get turned into online pages, posts, etc --\u0026gt;data/ --\u0026gt;i18n/ --\u0026gt;layouts/\t# html templates provide structure --\u0026gt;public/ --\u0026gt;resources/ --\u0026gt;static/\t# images, css, js files available at site root --\u0026gt;themes/\t# downloaded themes --\u0026gt;config.toml\t# hugo configuration settings Hugo basic commands\r#\rCreate a hugo directory to store all the source files and configurations , then get into the root directory:\nhugo new site myBlog cd myBlog Create your contents. To build your site, run the following code:\nhugo â€‹\tThe pubilc directory will be generated when you run this command.\nTo view your site while developing layouts or creating contents, get into your root directory and run:\nhugo server (use \u0026#34;hugo server --help\u0026#34; to see more operations) Comparison with Hexo(other site generator), Hugo can\u0026rsquo;t submit new contents to GitHub Pages automatically. So that\u0026rsquo;s our job.\nIf you are the first time to develop Hugo using GitHub Pages, run the following code:\ngit init git remote add origin https://github.com/[GitHub username]/[GitHub username].github.io.git git add -A git commit -m \u0026#34;whaterver you want to introduce your repo\u0026#34; git push -u origin master If not, run the following code when you need to upload new contents:\ngit add -A git commit -m \u0026#34;Introduce this change\u0026#34; git push -u origin master "},{"id":3,"href":"/docs/Light-Weight-Neural-Networks/","title":"Light Weight Neural Networks","section":"Docs","content":"\rLight Weight Neural Networks Intro\r#\rLight Weight Neural Networks are a series of extremly efficient network. It pay more attention on model size or inference time. Although, there are numerous large models\n"},{"id":4,"href":"/docs/Reinforcement-Learning/","title":"Reinforcement learning","section":"Docs","content":"\rReinforcement Learning Intro\r#\r"}]